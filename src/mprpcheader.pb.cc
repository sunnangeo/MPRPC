// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mprpcheader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mprpcheader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mprpc {

namespace {

const ::google::protobuf::Descriptor* MprpcHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MprpcHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mprpcheader_2eproto() {
  protobuf_AddDesc_mprpcheader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mprpcheader.proto");
  GOOGLE_CHECK(file != NULL);
  MprpcHeader_descriptor_ = file->message_type(0);
  static const int MprpcHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprpcHeader, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprpcHeader, method_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprpcHeader, args_size_),
  };
  MprpcHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MprpcHeader_descriptor_,
      MprpcHeader::default_instance_,
      MprpcHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprpcHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MprpcHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MprpcHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mprpcheader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MprpcHeader_descriptor_, &MprpcHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mprpcheader_2eproto() {
  delete MprpcHeader::default_instance_;
  delete MprpcHeader_reflection_;
}

void protobuf_AddDesc_mprpcheader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021mprpcheader.proto\022\005mprpc\"K\n\013MprpcHeade"
    "r\022\024\n\014service_name\030\001 \001(\014\022\023\n\013method_name\030\002"
    " \001(\014\022\021\n\targs_size\030\003 \001(\r", 103);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mprpcheader.proto", &protobuf_RegisterTypes);
  MprpcHeader::default_instance_ = new MprpcHeader();
  MprpcHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mprpcheader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mprpcheader_2eproto {
  StaticDescriptorInitializer_mprpcheader_2eproto() {
    protobuf_AddDesc_mprpcheader_2eproto();
  }
} static_descriptor_initializer_mprpcheader_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MprpcHeader::kServiceNameFieldNumber;
const int MprpcHeader::kMethodNameFieldNumber;
const int MprpcHeader::kArgsSizeFieldNumber;
#endif  // !_MSC_VER

MprpcHeader::MprpcHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mprpc.MprpcHeader)
}

void MprpcHeader::InitAsDefaultInstance() {
}

MprpcHeader::MprpcHeader(const MprpcHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mprpc.MprpcHeader)
}

void MprpcHeader::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MprpcHeader::~MprpcHeader() {
  // @@protoc_insertion_point(destructor:mprpc.MprpcHeader)
  SharedDtor();
}

void MprpcHeader::SharedDtor() {
  if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_name_;
  }
  if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete method_name_;
  }
  if (this != default_instance_) {
  }
}

void MprpcHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MprpcHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MprpcHeader_descriptor_;
}

const MprpcHeader& MprpcHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mprpcheader_2eproto();
  return *default_instance_;
}

MprpcHeader* MprpcHeader::default_instance_ = NULL;

MprpcHeader* MprpcHeader::New() const {
  return new MprpcHeader;
}

void MprpcHeader::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_service_name()) {
      if (service_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        service_name_->clear();
      }
    }
    if (has_method_name()) {
      if (method_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        method_name_->clear();
      }
    }
    args_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MprpcHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mprpc.MprpcHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_service_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method_name;
        break;
      }

      // optional bytes method_name = 2;
      case 2: {
        if (tag == 18) {
         parse_method_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_method_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_args_size;
        break;
      }

      // optional uint32 args_size = 3;
      case 3: {
        if (tag == 24) {
         parse_args_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &args_size_)));
          set_has_args_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mprpc.MprpcHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mprpc.MprpcHeader)
  return false;
#undef DO_
}

void MprpcHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mprpc.MprpcHeader)
  // optional bytes service_name = 1;
  if (has_service_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->service_name(), output);
  }

  // optional bytes method_name = 2;
  if (has_method_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->method_name(), output);
  }

  // optional uint32 args_size = 3;
  if (has_args_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->args_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mprpc.MprpcHeader)
}

::google::protobuf::uint8* MprpcHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mprpc.MprpcHeader)
  // optional bytes service_name = 1;
  if (has_service_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->service_name(), target);
  }

  // optional bytes method_name = 2;
  if (has_method_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->method_name(), target);
  }

  // optional uint32 args_size = 3;
  if (has_args_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->args_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mprpc.MprpcHeader)
  return target;
}

int MprpcHeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes service_name = 1;
    if (has_service_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->service_name());
    }

    // optional bytes method_name = 2;
    if (has_method_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->method_name());
    }

    // optional uint32 args_size = 3;
    if (has_args_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->args_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MprpcHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MprpcHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MprpcHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MprpcHeader::MergeFrom(const MprpcHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service_name()) {
      set_service_name(from.service_name());
    }
    if (from.has_method_name()) {
      set_method_name(from.method_name());
    }
    if (from.has_args_size()) {
      set_args_size(from.args_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MprpcHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MprpcHeader::CopyFrom(const MprpcHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MprpcHeader::IsInitialized() const {

  return true;
}

void MprpcHeader::Swap(MprpcHeader* other) {
  if (other != this) {
    std::swap(service_name_, other->service_name_);
    std::swap(method_name_, other->method_name_);
    std::swap(args_size_, other->args_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MprpcHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MprpcHeader_descriptor_;
  metadata.reflection = MprpcHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mprpc

// @@protoc_insertion_point(global_scope)
